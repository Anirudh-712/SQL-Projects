-- Create the database
CREATE DATABASE Sales_db;
go

USE Sales_db;
go

-- Create FactTable  (sample data from google)
CREATE TABLE FactTable (
    Date DATE,
    ProductID INT,
    Profit DECIMAL(10, 2),
    Sales DECIMAL(10, 2),
    Margin DECIMAL(10, 2),
    COGS DECIMAL(10, 2),
    TotalExpenses DECIMAL(10, 2),
    Marketing DECIMAL(10, 2),
    Inventory INT,
    BudgetProfit DECIMAL(10, 2),
    BudgetCOGS DECIMAL(10, 2),
    BudgetMargin DECIMAL(10, 2),
    BudgetSales DECIMAL(10, 2),
    AreaCode INT
);
go

-- sample data
INSERT INTO FactTable (Date, ProductID, Profit, Sales, Margin, COGS, TotalExpenses, Marketing, Inventory, BudgetProfit, BudgetCOGS, BudgetMargin, BudgetSales, AreaCode)
VALUES
('2023-01-01', 1, 120.00, 500.00, 20.00, 300.00, 50.00, 100.00, 20, 100.00, 200.00, 25.00, 600.00, 101),
('2023-01-05', 2, 200.00, 800.00, 30.00, 400.00, 60.00, 150.00, 30, 150.00, 250.00, 35.00, 850.00, 102),
('2023-02-10', 1, 150.00, 600.00, 25.00, 320.00, 70.00, 120.00, 25, 130.00, 220.00, 30.00, 650.00, 103),
('2023-03-15', 3, 300.00, 1000.00, 35.00, 500.00, 90.00, 200.00, 40, 200.00, 350.00, 45.00, 1200.00, 101),
('2023-04-20', 2, 250.00, 900.00, 28.00, 450.00, 75.00, 160.00, 35, 180.00, 300.00, 40.00, 950.00, 102);
go

-- Create ProductTable
CREATE TABLE ProductTable (
    ProductID INT PRIMARY KEY,
    ProductType VARCHAR(50),
    Product VARCHAR(50),
    Type VARCHAR(50)
);
go


--  Sample data
INSERT INTO ProductTable (ProductID, ProductType, Product, Type)
VALUES
(1, 'Beverage', 'Coffee', 'Regular'),
(2, 'Snack', 'Chips', 'Regular'),
(3, 'Beverage', 'Juice', 'Premium'),
(4, 'Beverage', 'Tea', 'Regular');

go

-- Create LocationTable
CREATE TABLE LocationTable (
    AreaCode INT PRIMARY KEY,
    State VARCHAR(50),
    Market VARCHAR(50),
    MarketSize VARCHAR(50)
);
go

--  Sample Data 
INSERT INTO LocationTable (AreaCode, State, Market, MarketSize)
VALUES
(101, 'California', 'West Coast', 'Large'),
(102, 'Colorado', 'Mountain', 'Medium'),
(103, 'New York', 'East Coast', 'Large'),
(104, 'Texas', 'South', 'Large');

go

--select * from FactTable

--1)Display the number of states present in the LocationTable

SELECT COUNT(DISTINCT State) AS NumberOfStates
FROM LocationTable;
go

--2. How many products are of regular type?

SELECT COUNT(*)
FROM ProductTable
where type= 'regular'
go

--3. How much spending has been done on marketing of product ID 1?

SELECT SUM(Marketing) as Total_Marketing_Spent
from FactTable
where ProductID= 1;
go

--4. What is the minimum sales of a product?

SELECT MIN(Sales) AS Minimum_sales
from FactTable
go

--5. Display the max Cost of Goods Sold (COGS)

SELECT MAX(COGS) AS MaxCOGS
FROM FactTable;
go

--6. Display the details of the product where the product type is coffee

SELECT *
FROM FactTable
WHERE TotalExpenses > 40;
go

--7. Display the details of the product where the product type is coffee

SELECT *
FROM ProductTable
WHERE ProductType = 'Beverage';
go

--8. What is the average sales in area code 719?

SELECT AVG(sales) as Avg_sales
from FactTable
where AreaCode= 719;
go


--SELECT AVG(sales) as Avg_sales
--from FactTable
--where AreaCode= 102;

--9. Find out the total profit generated by Colorado state

SELECT SUM(Profit) AS TotalProfit
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
WHERE l.State = 'Colorado';
go

--10. Display the average inventory for each product ID

SELECT ProductID, AVG(inventory) AS Average_Inventory
from FactTable
GROUP BY ProductID;
go

--11. Display state in sequential order in the LocationTable

SELECT State
FROM LocationTable
ORDER BY State;
go

--12. Display the average budget of the product where the average budget margin is greater than 100

SELECT ProductID,AVG(budgetprofit) as AVG_Budget_profit
from FactTable
GROUP BY ProductID
having AVG(BudgetMargin) > 100;
go

--13. What is the total sales done on date '2010-01-01'?

SELECT SUM(Sales) AS TotalSales
FROM FactTable
WHERE Date = '2010-01-01';
go

--14. Display the average total expense of each product ID on an individual date:

SELECT Date, ProductID, AVG(TotalExpenses) AS AvgTotalExpenses
FROM FactTable
GROUP BY Date, ProductID;
go

--15. Display the table with the following attributes: date, productID, product_type, product, sales, profit, state, area_code

SELECT f.Date, f.ProductID, p.ProductType, p.Product, f.Sales, f.Profit, l.State, f.AreaCode
FROM FactTable f
JOIN ProductTable p ON f.ProductID = p.ProductID
JOIN LocationTable l ON f.AreaCode = l.AreaCode;
go

--16. Display the rank without any gap to show the sales-wise rank

SELECT f.ProductID, f.Sales, p.ProductType,
    DENSE_RANK() OVER (ORDER BY f.Sales DESC) AS SalesRank
FROM FactTable f
JOIN ProductTable p ON f.ProductID = p.ProductID;
go

--17. Find the state-wise profit and sales

SELECT l.state, SUM(f.Profit) as Total_Profit, SUM(f.Sales) as Total_sales
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
GROUP BY l.State;
go

--18. Find the state-wise profit and sales along with the product name

SELECT l.state, SUM(f.Profit) as Total_Profit, SUM(f.Sales) as Total_sales
FROM FactTable f
JOIN ProductTable p ON f.ProductID = p.ProductID
JOIN LocationTable l ON f.AreaCode = l.AreaCode
GROUP BY l.State,p.Product;
go

--19.If there is an increase in sales of 5%, calculate the increased sales

SELECT ProductID, Sales, (Sales * 1.05) AS IncreasedSales
FROM FactTable;
go

--20. Find the maximum profit along with the product ID and product type

SELECT f.ProductID, p.ProductType, MAX(f.Profit) AS MaxProfit
FROM FactTable f
JOIN ProductTable p ON f.ProductID = p.ProductID
GROUP BY f.ProductID, p.ProductType;
go

--21. Create a stored procedure to fetch the result according to the product type

CREATE PROCEDURE GetProductsByType (@ProductType VARCHAR(50))
AS
BEGIN
    SELECT *
    FROM ProductTable
    WHERE ProductType = @ProductType;
END;
go

--22. Write a query with a condition where total expenses less than 60 means profit, else loss

SELECT ProductID, 
    CASE 
        WHEN TotalExpenses < 60 THEN 'Profit' 
        ELSE 'Loss' 
    END AS Profit_Or_Loss
FROM FactTable;
go

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order

SELECT Date, ProductID, SUM(Sales) AS Total_weekly_sales
from FactTable
GROUP BY ROLLUP(Date, ProductID);
go

--Apply union and intersection operator on the tables with the attribute AreaCode

-- Union
SELECT AreaCode FROM FactTable
UNION
SELECT AreaCode FROM LocationTable;
go

-- Intersection
SELECT AreaCode FROM FactTable
INTERSECT
SELECT AreaCode FROM LocationTable;
go

--25. Create a user-defined function to fetch a particular product type based on the user's preference

CREATE FUNCTION GetProductByType (@ProductType VARCHAR(50))
RETURNS TABLE
AS
RETURN 
(
    SELECT *
    FROM ProductTable
    WHERE ProductType = @ProductType
);
go

--26. Change the product type from coffee to tea where product ID is 1 and undo it

-- Change to tea
UPDATE ProductTable
SET ProductType = 'Tea'
WHERE ProductID = 1;
go

-- Undo change
UPDATE ProductTable
SET ProductType = 'Coffee'
WHERE ProductID = 1;
go

--27. Display the date, product ID, and sales where total expenses are between 100 to 200

SELECT Date, ProductID, Sales
FROM FactTable
WHERE TotalExpenses BETWEEN 100 AND 200 ;
go

--SELECT Date, ProductID, Sales
--FROM FactTable
--WHERE TotalExpenses BETWEEN 50 AND 70;

--28. Delete the records in the ProductTable for regular type

DELETE FROM ProductTable
WHERE Type = 'Regular';
go

--29. Display the ASCII value of the fifth character from the column Product

SELECT Product, ASCII(SUBSTRING(Product, 5, 1)) AS AsciiValue
FROM ProductTable;
